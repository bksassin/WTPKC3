[{"/home/bsassin/Desktop/projects/whos-that-pokecard/src/index.js":"1","/home/bsassin/Desktop/projects/whos-that-pokecard/src/PokemonCard.jsx":"2","/home/bsassin/Desktop/projects/whos-that-pokecard/src/App.jsx":"3","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/index.js":"4","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/App.jsx":"5","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/firebase.js":"6","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/SignIn.jsx":"7","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/PokemonCard.jsx":"8","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/LogOut.jsx":"9","/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/Leaderboard.jsx":"10"},{"size":210,"mtime":1675992502896,"results":"11","hashOfConfig":"12"},{"size":3324,"mtime":1676102816775,"results":"13","hashOfConfig":"12"},{"size":188,"mtime":1675992477629,"results":"14","hashOfConfig":"12"},{"size":210,"mtime":1675992502896,"results":"15","hashOfConfig":"16"},{"size":3330,"mtime":1676399316374,"results":"17","hashOfConfig":"16"},{"size":957,"mtime":1676391637661,"results":"18","hashOfConfig":"16"},{"size":463,"mtime":1676361382592,"results":"19","hashOfConfig":"16"},{"size":10594,"mtime":1676389685233,"results":"20","hashOfConfig":"16"},{"size":553,"mtime":1676334730068,"results":"21","hashOfConfig":"16"},{"size":1532,"mtime":1676400128491,"results":"22","hashOfConfig":"16"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1eineoe",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yszsy3",{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/bsassin/Desktop/projects/whos-that-pokecard/src/index.js",[],[],[],"/home/bsassin/Desktop/projects/whos-that-pokecard/src/PokemonCard.jsx",[],[],"/home/bsassin/Desktop/projects/whos-that-pokecard/src/App.jsx",[],[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/index.js",[],[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/App.jsx",[],[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/firebase.js",["58"],[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/SignIn.jsx",[],[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/PokemonCard.jsx",["59","60","61"],[],"import React, {useState, useEffect, useMemo} from 'react';\nimport {db, auth} from '../firebase';\nimport {doc, getDoc, updateDoc, setDoc, onSnapshot, serverTimestamp} from 'firebase/firestore';\nimport { useAuthState } from 'react-firebase-hooks/auth';\n\n\n\nconst App = () => {\n    const [apiData, setApiData] = useState(null);\n    const [card, setCard] = useState({});\n    const [cardName, setCardName] = useState('');\n    const [cardSet, setCardSet] = useState('');\n    const [options, setOptions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [blurred, setBlurred] = useState(true); \n    const [symbolUrl, setSymbolUrl] = useState(''); \n    const [setNameOptions, setSetNameOptions] = useState([]);\n    const [correctCardName, setCorrectCardName] = useState(false);\n    const [correctCardSet, setCorrectCardSet] = useState(false);\n    const [score, setScore] = useState(0);\n    const [incorrectClicks, setIncorrectClicks] = useState(0);\n    const [clickedOptions, setClickedOptions] = useState([]);\n    const [correctOptionClicked, setCorrectOptionClicked] = useState(false);\n    const [scores, setScores] = useState();\n    const cardBack = require('../assets/card.png'); // with require\n    const [user] = useAuthState(auth);\n\n\n    const fetchData = async () => {\n      setLoading(true);\n      setOptions([]);\n      setIncorrectClicks(0);\n      setCorrectCardName(false);\n      setCorrectCardSet(false);\n      setCorrectOptionClicked(false);\n      setClickedOptions([]);\n      const response = await fetch(\"https://api.pokemontcg.io/v2/cards?select=name,images,set\");\n      const data = await response.json();\n      setApiData(data);\n      const randomIndex = Math.floor(Math.random() * data.data.length);\n      setCard(data.data[randomIndex]);\n      setCardName(data.data[randomIndex].name);\n      setCardSet(data.data[randomIndex].set.name);\n      setSymbolUrl(data.data[randomIndex].set.images.symbol);\n      setLoading(false);\n      setBlurred(true);\n  };\n  \n\n  const getRandomOptions = useMemo(() => {\n    async function getRandomOptions() {\n        if (apiData) {\n            let randomOptions = [];\n            while (randomOptions.length < 4) {\n                const randomIndex = Math.floor(Math.random() * apiData.data.length);\n                if (randomOptions.indexOf(apiData.data[randomIndex].name) === -1) {\n                    randomOptions.push(apiData.data[randomIndex].name);\n                }\n            }\n            randomOptions[Math.floor(Math.random() * 4)] = cardName;\n            setOptions(randomOptions);\n        }\n    }\n    return getRandomOptions;\n}, [apiData, cardName]);\n\nconst fetchSetNameOptions = useMemo(() => {\n  async function fetchSetNameOptions() {\n      if (apiData) {\n          let setNameOptionList = [];\n          while (setNameOptionList.length < 3) {\n              const randomIndex = Math.floor(Math.random() * apiData.data.length);\n              if (setNameOptionList.indexOf(apiData.data[randomIndex].set.name) === -1) {\n                  setNameOptionList.push(apiData.data[randomIndex].set.name);\n              }\n          }\n          setNameOptionList[Math.floor(Math.random() * 3)] = cardSet;\n          setSetNameOptions(setNameOptionList);\n      }\n  }\n  return fetchSetNameOptions;\n}, [apiData, cardSet]);\n\nuseEffect(() => {\n  if (user) {\n    const { uid, displayName, email } = auth.currentUser;\n    const docRef = doc(db, 'scores', uid);\n    const scoreData = {\n      name: displayName,\n      email: email,\n      date: serverTimestamp()\n    };\n    setDoc(docRef, scoreData, { merge: true });\n    \n    const unsubscribe = onSnapshot(docRef, (doc) => {\n      const data = doc.data();\n      setScore(data.score || 0);\n      setLoading(false);\n    });\n    return unsubscribe;\n  }\n}, [user]);\n      \nuseEffect(() => {\n  if (cardName && apiData) {\n      fetchSetNameOptions();\n      getRandomOptions();\n  }\n}, [cardName, apiData]);\n\nuseEffect(() => {\n  if (!user) {\n    setScore(0);\n  }\n}, [user]);\n\n\n\n    const handleButtonPress = () => {\n        setCorrectCardSet(false);\n        fetchData();\n    };\n\n    const handleOptionClick = (option) => {\n      if (clickedOptions.includes(option)) {\n        return;\n      }\n      if (option === cardName) {\n        setBlurred(false);\n        setCorrectCardName(true);\n        if (auth.currentUser) {\n          const newScore = score + 10;\n          const uid = auth.currentUser.uid;\n          const docRef = doc(db, 'scores', uid);\n          getDoc(docRef).then((docSnapshot) => {\n            if (docSnapshot.exists() && docSnapshot.data().score < newScore) {\n              updateDoc(docRef, { score: newScore });\n            } else {\n              setDoc(docRef, { score: newScore });\n            }\n          });\n        }\n        setScore(prevScore => prevScore + 10);\n        setCorrectOptionClicked(true); // set the correct option as clicked\n      } else if (option === cardSet) {\n        setCorrectCardSet(true);\n        if (auth.currentUser) {\n          const newScore = score + 15;\n          const uid = auth.currentUser.uid;\n          const docRef = doc(db, 'scores', uid);\n          getDoc(docRef).then((docSnapshot) => {\n            if (docSnapshot.exists() && docSnapshot.data().score < newScore) {\n              updateDoc(docRef, { score: newScore });\n            } else {\n              setDoc(docRef, { score: newScore });\n            }\n          });\n        }\n        setScore(prevScore => prevScore + 15);\n        setCorrectOptionClicked(true); // set the correct option as clicked\n      } else {\n        setIncorrectClicks(incorrectClicks + 1);\n        if (incorrectClicks === 2) {\n          setScore(0);\n          setIncorrectClicks(0);\n        }\n      }\n      \n      setClickedOptions([...clickedOptions, option]);\n    };\n    \n    \n    \n  \n    return (\n        <div className=\"pokedex\">\n            <div className=\"left-container\">\n                <div className=\"left-container__top-section\">\n                    <div className=\"top-section__blue\"></div>\n                    <div className=\"top-section__small-buttons\">\n                        <div className=\"top-section__red\"></div>\n                        <div className=\"top-section__yellow\"></div>\n                        <div className=\"top-section__green\"></div>\n                    </div>\n                    <div className='w-full text-xs text-yellow-500 font-bold flex flex-row'>\n                    <div className='bg-black w-1/2 py-2 pl-1'>SCORE: <span className='ml-5 text-white'>{score}</span></div>\n                    <div className='w-1/2 text-right text-xl font-bold text-red-900'>PACKADDX</div>\n                    </div>\n                </div>\n                <div className=\"left-container__main-section-container\">\n                    <div className=\"left-container__main-section\">\n                        <div className=\"main-section__white\">\n                            {loading ? (\n          <img className='object-contain h-full mx-auto' src={cardBack} alt=\"card\" />\n        ) : (\n          <img\n            className={`object-contain h-full mx-auto ${blurred ? 'blurred-image' : ''}`}\n            src={card.images && card.images.small}\n            alt={card.name}\n          />\n        )}\n                            <div className=\"main-section__black\"></div>\n                        </div>\n                        <div className=\"left-container__controllers w-full h-20 flex mt-3\">\n                        <div className=\"w-1/5\">\n              {loading ? (\n                <div></div>\n              ) : symbolUrl ? (\n                <img src={symbolUrl} alt=\"symbol\" />\n              ) : (\n                <div />\n              )}\n            </div>\n                            <div className=\"w-full\">\n                            <div className='text-center text-sm'>\n  {correctCardSet ? (\n    <div className=\"pop-up\">\n      <div className=\"pop-up-content\">\n        That's Correct!\n      </div>\n    </div>\n  ) : (\n    ''\n  )}\n</div>\n                            <div className='text-center text-sm flex justify-between'>\n                            {!loading && setNameOptions.length > 0 && incorrectClicks !== 2 && setNameOptions.map((option, index) => (\n  <button\n    key={index}\n    className={`set-name text-white bg-gray-800 hover:bg-gray-900 focus:outline-none focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm p-2 m-1 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700${\n      incorrectClicks === 1 ? \"flash-red\" : \"\"\n    }`}\n    onClick={() => handleOptionClick(option)}\n  >\n    {option}\n  </button>\n))}\n                      \n                            </div>\n                  \n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"left-container__right\">\n                        <div className=\"left-container__hinge\"></div>\n                        <div className=\"left-container__hinge\"></div>\n                    </div>\n                </div>\n            </div>\n  \n            <div className=\"right-container\">\n                <div className=\"right-container__black\">\n                    <div className=\"right-container__screen flex flex-col content-between space-y-6 text-xl\">\n                    {!loading && options.length > 0 && incorrectClicks !== 2 && !correctOptionClicked && (\n  <div className=\"right-container__screen flex flex-col content-between space-y-6 text-xl\">\n    {options.map((option, index) => (\n      <button\n        key={index}\n        className={`pokemon-name ${\n          incorrectClicks === 1 ? \"flash-red\" : \"\"\n        }`}\n        onClick={() => handleOptionClick(option)}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n)}\n{incorrectClicks === 2 && (\n  <div className=\"pop-up mt-2 text-center\">\n    <div className=\"pop-up-content\">\n      Sorry, you have to start over now.\n    </div>\n  </div>\n)}\n</div>\n                </div>\n                <div className=\"right-container__buttons flex flex-col mt-10p\">\n                {correctCardName && (\n  <div className=\"pop-up mt-2 text-center\">\n    <div className=\"pop-up-content\">\n      That's Correct!\n    </div>\n  </div>\n)}\n<button\n  className={`pokemon-name bg-green-400 mt-5 ${\n    loading ? \"cursor-not-allowed opacity-50\" : \"\"\n  }`}\n  disabled={loading}\n  onClick={() => {\n    if (incorrectClicks === 2) {\n      window.location.reload();\n    } else {\n      handleButtonPress();\n    }\n  }}\n>\n  {incorrectClicks === 2 ? \"Restart\" : \"Load New Card\"}\n</button>\n\n\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n",[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/components/LogOut.jsx",["62"],[],"import React from \"react\";\nimport {auth} from \"../firebase\";\n\n\n\n\nconst LogOut = () => {\n    const signOut = () => {\n        signOut(auth)\n    }\n\n    return (\n        <button className=\"text-gray-900 bg-white border border-gray-300 focus:outline-none hover:bg-gray-100 focus:ring-4 focus:ring-gray-200 font-medium rounded-lg px-5 py-2.5 mr-2 mb-2 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700\" onClick={() => auth.signOut()}>LogOut</button>\n    )\n}\n\nexport default LogOut",[],"/home/bsassin/Desktop/projects/wtpk2/WTPKC3/src/Leaderboard.jsx",[],[],{"ruleId":"63","severity":1,"message":"64","line":22,"column":7,"nodeType":"65","messageId":"66","endLine":22,"endColumn":16},{"ruleId":"63","severity":1,"message":"67","line":24,"column":12,"nodeType":"65","messageId":"66","endLine":24,"endColumn":18},{"ruleId":"63","severity":1,"message":"68","line":24,"column":20,"nodeType":"65","messageId":"66","endLine":24,"endColumn":29},{"ruleId":"69","severity":1,"message":"70","line":109,"column":4,"nodeType":"71","endLine":109,"endColumn":23,"suggestions":"72"},{"ruleId":"63","severity":1,"message":"73","line":8,"column":11,"nodeType":"65","messageId":"66","endLine":8,"endColumn":18},"no-unused-vars","'analytics' is assigned a value but never used.","Identifier","unusedVar","'scores' is assigned a value but never used.","'setScores' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetchSetNameOptions' and 'getRandomOptions'. Either include them or remove the dependency array.","ArrayExpression",["74"],"'signOut' is assigned a value but never used.",{"desc":"75","fix":"76"},"Update the dependencies array to be: [cardName, apiData, fetchSetNameOptions, getRandomOptions]",{"range":"77","text":"78"},[3892,3911],"[cardName, apiData, fetchSetNameOptions, getRandomOptions]"]